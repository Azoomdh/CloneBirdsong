
import pandas as pd;

def convertDfToMean(dfVf :pd.DataFrame) :
    # ƒê·ªÉ ch·ªçn c√°c c·ªôt kh√¥ng ph·∫£i l√† ki·ªÉu s·ªë trong m·ªôt DataFrame (df), b·∫°n d√πng: üü• df.select_dtypes(exclude='number')
    dfVf_ChuaSo = dfVf.select_dtypes(include= "number")

    dfVf_ChuaSo_Mean = dfVf_ChuaSo.mean().reset_index();

    dfVf_ChuaSo_Mean.columns = ['column_name', 'mean_value']
    
    return dfVf_ChuaSo_Mean;
#

# def saveMeanFromDf(dfVf :pd.DataFrame, duongDanCsvFvMean :str) :
#     dfVf_Mean = convertDfToMean(dfVf= dfVf)

#     dfVf_Mean.to_csv(path_or_buf= duongDanCsvFvMean)
# #

def convertDfToStd(dfVf :pd.DataFrame) :
    dfVf_ChuaSo = dfVf.select_dtypes(include= "number")

    dfVf_ChuaSo_Std = dfVf_ChuaSo.std().reset_index()

    dfVf_ChuaSo_Std.columns = ['column_name', 'std_value']

    return dfVf_ChuaSo_Std
#

# def saveStdFromDf(dfVf :pd.DataFrame, duongDanCsvFvStd :str) :
#     dfVf_Std = convertDfToStd(dfVf= dfVf)

#     dfVf_Std.to_csv(path_or_buf= duongDanCsvFvStd)
# #

def saveMeanVaStd(duongDanCsvFv :str, duongDanCsvFvMeanStd :str):
    dfVf = pd.read_csv(filepath_or_buffer= duongDanCsvFv)

    dfVf_Mean = convertDfToMean(dfVf= dfVf)
    dfVf_Std = convertDfToStd(dfVf= dfVf)

    dfVf_MeanStd = pd.merge(dfVf_Mean, dfVf_Std, on='column_name', how= 'inner')

    dfVf_MeanStd.to_csv(path_or_buf= duongDanCsvFvMeanStd, index= False)

    # saveMeanFromDf(dfVf, duongDanCsvFvMean)
    # saveStdFromDf(dfVf, duongDanCsvFvStd)
#

"""

ƒê·ªÉ n·ªëi hai DataFrame b·∫±ng m·ªôt c·ªôt chung (v√≠ d·ª•: 'column_name'), b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c merge() trong pandas. ƒê√¢y l√† c√°ch ƒë·ªÉ th·ª±c hi·ªán vi·ªác n·ªëi (merge) hai DataFrame theo m·ªôt c·ªôt chung:

Gi·∫£ s·ª≠ b·∫°n c√≥ hai DataFrame l√† df1 v√† df2, b·∫°n c√≥ th·ªÉ l√†m nh∆∞ sau:

python
Sao ch√©p
Ch·ªânh s·ª≠a

import pandas as pd

# V√≠ d·ª• v·ªÅ hai DataFrame
df1 = pd.DataFrame({
    'column_name': [1, 2, 3],
    'A': ['a1', 'a2', 'a3']
})

df2 = pd.DataFrame({
    'column_name': [2, 3, 4],
    'B': ['b2', 'b3', 'b4']
})

# N·ªëi hai DataFrame theo c·ªôt 'column_name'
df_merged = pd.merge(df1, df2, on='column_name', how='inner')

# K·∫øt qu·∫£
print(df_merged)
·ªû ƒë√¢y:

on='column_name': ch·ªâ ƒë·ªãnh c·ªôt n√†o ƒë·ªÉ n·ªëi.

how='inner': lo·∫°i n·ªëi s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã how th√†nh 'left', 'right', ho·∫∑c 'outer' t√πy theo y√™u c·∫ßu c·ªßa b·∫°n).

C√°c ki·ªÉu n·ªëi (how):
'inner': N·ªëi ch·ªâ nh·ªØng gi√° tr·ªã chung trong c·∫£ hai DataFrame (m·∫∑c ƒë·ªãnh).

'left': L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ DataFrame b√™n tr√°i v√† n·ªëi v·ªõi d·ªØ li·ªáu t·ª´ DataFrame b√™n ph·∫£i.

'right': L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ DataFrame b√™n ph·∫£i v√† n·ªëi v·ªõi d·ªØ li·ªáu t·ª´ DataFrame b√™n tr√°i.

'outer': N·ªëi t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c·∫£ hai DataFrame, ƒëi·ªÅn gi√° tr·ªã NaN cho c√°c ph·∫ßn kh√¥ng c√≥ d·ªØ li·ªáu t∆∞∆°ng ·ª©ng.

N·∫øu b·∫°n mu·ªën t√¥i gi·∫£i th√≠ch th√™m v·ªÅ c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa c√°c ki·ªÉu n·ªëi n√†y, ho·∫∑c c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o kh√°c, c·ª© tho·∫£i m√°i h·ªèi nh√©!

"""